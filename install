#!/bin/bash

# OS:
#   RedHat 7.9.2009(Core 3.10.0-1160.45.1.el7.x86_64 x86_64) 
#   CentOS 7
#
# Reference:
#   Build GCC FROM SOURCE: https://blog.csdn.net/qq_42189083/article/details/109612289
#   GCC SOURCE Code: http://ftp.gnu.org/gnu/gcc

help() {
  echo "Usage:"
  echo "  zmicro package install gcc"
  echo ""
}

build_from_source() {
  local version=$1
  if [ -z "$version" ]; then
    log::error "[gcc::build_from_source] version is required"
    exit 1
  fi

  log::info "[gcc::build_from_source] started ..."

   which bzip2 >> /dev/null 2>&1
   if [ "$?" != "0" ]; then
     pm install -y bzip2
   fi

  local build_dir=$(os::tmp)/build/zmicro_package_gcc
  mkdir -p $build_dir
  log::info "[gcc::build_from_source] build_dir: $build_dir"

  # example: http://ftp.gnu.org/gnu/gcc/gcc-12.1.0/gcc-12.1.0.tar.gz
  local url="https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.gz"
  local filepath=$build_dir/gcc-$version.tar.gz

  local src_dir=$build_dir/src
  local src_dir_tmp=$build_dir/gcc-$version
  local src_build_dir=$src_dir/build

  if [ -d "$src_dir" ]; then
    rm -rf $src_dir
  fi

  # local install_dir=$build_dir/install
  # local build_log=$build_dir/build.log
  # local gcc_dir=$install_dir/gcc-$version
  # local gcc_bin=$gcc_dir/bin/gcc
  # local gcc_lib=$gcc_dir/lib64

  log::info "[gcc::build_from_source] download gcc $version source ..."
  log::info "[gcc::build_from_source] url: $url"
  wget -c $url -O $filepath
  tar -xzf $filepath -C $build_dir

  mv $src_dir_tmp $src_dir
  mkdir $src_build_dir
  # rm -rf $filepath

  log::info "[gcc::build_from_source] install dependencies ..."
  cd $src_dir
  ./contrib/download_prerequisites

  log::info "[gcc::build_from_source] configure ..."
  cd $src_build_dir
  ../configure --prefix=/usr/local/gcc --enable-languages=c,c++ --disable-multilib

  log::info "[gcc::build_from_source] build ..."
  # make -j$(nproc) 
  make

  log::info "[gcc::build_from_source] install ..."
  make install

  log::info "[gcc::build_from_source] backup gcc ..."
  if [ ! -f "/usr/bin/gcc_bak" ]; then
    mv /usr/bin/gcc /usr/bin/gcc_bak
  fi
  if [ ! -f "/usr/bin/g++_bak" ]; then
    mv /usr/bin/g++ /usr/bin/g++_bak
  fi

  log::info "[gcc::build_from_source] link gcc/g++ ..."
  ln -s /usr/local/gcc/bin/gcc /usr/bin/gcc
  ln -s /usr/local/gcc/bin/g++ /usr/bin/g++

  # log::info "[gcc::build_from_source] clean ..."
  # rm -rf $build_dir
  # rm -rf $src_dir
  # rm -rf $filepath

  log::info "[gcc::build_from_source] show gcc version ..."
  gcc --version
  g++ --version

  log::success "[gcc::build_from_source] done"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi
  
  # only works when is build from source
  local is_build_from_source=false
  local version="$PACKAGE_GCC_DEFAULT_VERSION"
  # local version="12.1.0"

  while [ "$1" != "" ]; do
    case $1 in
      -h | --help ) help; exit 0 ;;
      -b | --build-from-source ) is_build_from_source=true ;;
      -v | --version ) version=$2; shift ;;
      * ) echo "Error: Unkown parameter: $1"; exit 1 ;;
    esac
    shift
  done

  if [ -n "$BUILD_FROM_SOURCE" ]; then
    is_build_from_source=true
  fi

  if [ -n "$GCC_VERSION" ]; then
    version="$GCC_VERSION"
  fi


  if [ "$is_build_from_source" = "true" ]; then
    log::info "Building from source"
    log::info "Version: $version"
    log::info "Installing..."
    # sudo apt-get install -y gcc-$version
    build_from_source "$version"
  else
    log::info "Installing from repository"
    pm install -y gcc
  fi

  log::info "Installed gcc $(zgvm current) ..."
}

run() {
  core $@
}

run $@
